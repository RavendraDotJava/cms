"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcraft_boilerplate"] = self["webpackChunkcraft_boilerplate"] || []).push([["slider-js"],{

/***/ "./src/js/components/slider.js":
/*!*************************************!*\
  !*** ./src/js/components/slider.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cSlider\": () => (/* binding */ cSlider)\n/* harmony export */ });\nfunction cSlider(ini) {\n  return {\n    slide: 1,\n    totalSlides: 1,\n    upcomingSlide: false,\n    active: false,\n    autoplay: ini.autoplay,\n    speed: ini.speed,\n    paused: false,\n    modalPaused: false,\n    timeout: false,\n    timer: false,\n    transitions: [],\n    init: function init() {\n      var $slide = this.$refs['slide-1'];\n      this.transitions.push($slide.getAttribute('x-transition:enter'));\n      this.transitions.push($slide.getAttribute('x-transition:enter-start'));\n      this.transitions.push($slide.getAttribute('x-transition:enter-end'));\n      this.transitions.push($slide.getAttribute('x-transition:leave'));\n      this.transitions.push($slide.getAttribute('x-transition:leave-start'));\n      this.transitions.push($slide.getAttribute('x-transition:leave-end'));\n      var count = this.$refs['window'].querySelectorAll('li').length;\n      this.totalSlides = count;\n      this.$refs['timer'].style.animationDuration = this.speed * 1000 - 110 + 'ms';\n      this.timer = true;\n\n      if (this.autoplay) {\n        this.setSliderTimeout();\n      }\n    },\n    showSlide: function showSlide(index) {\n      return this.slide === index;\n    },\n    togglePause: function togglePause() {\n      if (this.paused) {\n        this.paused = false;\n      } else {\n        this.paused = true;\n      }\n    },\n    toggleModalPause: function toggleModalPause() {\n      if (this.modalPaused) {\n        this.modalPaused = false;\n      } else {\n        this.modalPaused = true;\n      }\n    },\n    isPaused: function isPaused() {\n      if (this.paused || this.modalPaused) {\n        clearTimeout(this.timeout);\n        this.timeout = 'paused';\n        return true;\n      } else {\n        if (this.timeout === 'paused') {\n          this.setSliderTimeout();\n        }\n      }\n    },\n    isModal: function isModal() {\n      if (this.$store.modal) {\n        if (this.$store.modal.show !== this.modalPaused) {\n          this.toggleModalPause();\n        }\n      } else {\n        return false;\n      }\n    },\n    prevSlide: function prevSlide() {\n      if (this.active) {\n        return false;\n      }\n\n      this.upcomingSlide = this.slide - 1 < 1 ? this.totalSlides : this.slide - 1;\n      this.changeSlide();\n    },\n    nextSlide: function nextSlide() {\n      if (this.active) {\n        return false;\n      }\n\n      this.upcomingSlide = this.slide + 1 > this.totalSlides ? 1 : this.slide + 1;\n      this.changeSlide();\n    },\n    changeSlide: function changeSlide() {\n      var $slide = this.$refs['slide-' + this.slide],\n          $upcoming = this.$refs['slide-' + this.upcomingSlide],\n          $window = this.$refs['window'],\n          height = $slide.offsetHeight,\n          _this = this;\n\n      $window.style.height = height + 'px';\n      this.slide = this.upcomingSlide;\n      this.upcomingSlide = false;\n      this.active = true;\n      this.timer = false;\n      void this.$refs['timer'].offsetWidth;\n      clearTimeout(this.timeout);\n      this.timeout = false;\n      setTimeout(function () {\n        var height = $upcoming.offsetHeight;\n        _this.timer = true;\n\n        if (_this.autoplay) {\n          _this.setSliderTimeout();\n        } // $window.style.height = height + 'px';\n\n\n        setTimeout(function () {\n          $window.style.height = '';\n          _this.active = false;\n\n          for (var t = 0; t < _this.transitions.length; t++) {\n            $slide.classList.remove(_this.transitions[t]);\n            $upcoming.classList.remove(_this.transitions[t]);\n          }\n        }, 1100);\n      }, 10);\n    },\n    setSliderTimeout: function setSliderTimeout() {\n      var _this = this;\n\n      clearTimeout(this.timeout);\n      this.timeout = false;\n\n      if (this.paused || this.modalPaused) {\n        return false;\n      }\n\n      this.timeout = setTimeout(function () {\n        if (!_this.isPaused()) {\n          _this.nextSlide();\n\n          _this.setSliderTimeout();\n        }\n      }, this.speed * 1000);\n    }\n  };\n}\n\n\n\n//# sourceURL=webpack://craft-boilerplate/./src/js/components/slider.js?");

/***/ })

}]);