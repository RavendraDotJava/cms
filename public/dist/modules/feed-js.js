"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcraft_boilerplate"] = self["webpackChunkcraft_boilerplate"] || []).push([["feed-js"],{

/***/ "./src/js/components/feed.js":
/*!***********************************!*\
  !*** ./src/js/components/feed.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cFeed\": () => (/* binding */ cFeed)\n/* harmony export */ });\nfunction cFeed(ini) {\n  var paramFilters = window.getParam('filters');\n  var pathFragments = window.location.pathname.split('page/');\n  return {\n    entry: ini.id,\n    active: false,\n    fade: false,\n    showFilters: false,\n    isMobile: true,\n    exclude: ini.exclude,\n    path: pathFragments[0],\n    feed: ini.feed,\n    action: '/feed/' + ini.feed + '/',\n    height: 0,\n    page: pathFragments[1] ? pathFragments[1] : 1,\n    pathFilters: paramFilters ? paramFilters.split(':') : [],\n    filters: ini.filters,\n    pagination: [],\n    total: 0,\n    $slot: false,\n    $self: false,\n    $filters: false,\n    $container: false,\n    init: function init() {\n      var _this = this;\n\n      this.$slot = this.$refs['slot'];\n      this.$self = this.$root;\n      this.$filters = this.$refs['filters'];\n      this.$container = this.$refs['container']; // this.$refs['pagination-bottom'].innerHTML = this.$refs['pagination-top'].innerHTML;\n\n      this.isMobile = !this.$breakpoint('mq480');\n      this.active = true;\n      this.setMinHeight();\n      requestAnimationFrame(function () {\n        setTimeout(function () {\n          _this.fade = true;\n          _this.height = _this.$container.offsetHeight;\n        });\n      });\n    },\n    toggleFilters: function toggleFilters() {\n      this.showFilters = !this.showFilters;\n      console.log(this.showFilters);\n    },\n    setPagination: function setPagination(pageInfo) {\n      this.pagination = pageInfo;\n    },\n    onResize: function onResize() {\n      this.height = this.$refs['container'].offsetHeight;\n      this.isMobile = !this.$breakpoint('mq480');\n    },\n    onTab: function onTab() {\n      var _this2 = this;\n\n      requestAnimationFrame(function () {\n        setTimeout(function () {\n          if (_this2.$refs['window']) {\n            _this2.$refs['window'].style.transitionDuration = '0s';\n            setTimeout(function () {\n              _this2.$refs['window'].style.transitionDuration = '';\n            }, 300);\n            _this2.height = _this2.$refs['container'].offsetHeight;\n          }\n        });\n      });\n    },\n    getPagination: function getPagination(adjacentPages) {\n      var items = [];\n      this.total = this.pagination.total;\n\n      if (this.pagination.totalPages === 1) {\n        return items;\n      }\n\n      var diff = adjacentPages ? adjacentPages + 1 : 3;\n      var start = this.pagination.currentPage - diff < 0 ? 0 : this.pagination.currentPage - diff;\n      var end = this.pagination.currentPage + diff > this.pagination.totalPages ? this.pagination.totalPages : this.pagination.currentPage + diff;\n      var classes = window.paginationOptions.baseClass;\n\n      if (this.pagination.currentPage > 1) {\n        items.push({\n          page: this.pagination.currentPage - 1,\n          label: window.paginationOptions.pagePrev,\n          class: classes + window.paginationOptions.interactClass,\n          href: this.getPaginatedUrl(this.currentPage - 1)\n        });\n      }\n\n      for (var i = start; i < end; i++) {\n        var p = i + 1;\n        var href = this.getPaginatedUrl(p);\n        var c = classes + (p === this.pagination.currentPage ? window.paginationOptions.currentClass : window.paginationOptions.interactClass);\n        items.push({\n          page: p,\n          label: p + '',\n          class: c,\n          href: p === this.pagination.currentPage ? false : href\n        });\n      }\n\n      if (this.pagination.currentPage < this.pagination.totalPages) {\n        items.push({\n          page: this.pagination.currentPage + 1,\n          label: window.paginationOptions.pageNext,\n          class: classes + window.paginationOptions.interactClass,\n          href: this.getPaginatedUrl(this.currentPage + 1)\n        });\n      }\n\n      return items;\n    },\n    getPaginatedUrl: function getPaginatedUrl(page, format) {\n      var path = format === 'action' ? this.action : this.path;\n      path = path.replace(/\\/?$/, '/');\n      var href = page > 1 ? path + 'page/' + page + '/' : path;\n      var query = '';\n\n      for (var key in this.filters) {\n        if (this.filters[key].length > 0) {\n          query += query.length > 0 ? '&' : '?';\n\n          if (this.filters[key].join !== undefined) {\n            query += key + '=' + this.filters[key].join(':');\n          } else {\n            query += key + '=' + this.filters[key];\n          }\n        }\n      }\n\n      if (format === 'action' && this.exclude) {\n        query += query.length > 0 ? '&' : '?';\n        query += 'exclude=' + this.exclude;\n      }\n\n      return href + query;\n    },\n    setHeight: function setHeight() {\n      this.$refs['window'].style.height = '';\n      var style = this.$refs['window'].getAttribute('style');\n\n      if (style) {\n        return style + '; height:' + this.height + 'px';\n      }\n\n      return 'height:' + this.height + 'px';\n    },\n    setMinHeight: function setMinHeight() {\n      var filterHeight = this.$refs['filters'].clientHeight;\n      this.$refs['window'].style.minHeight = filterHeight + 'px';\n    },\n    doFilter: function doFilter($e) {\n      $e.preventDefault();\n      this.page = 1;\n      this.getItems();\n    },\n    doReset: function doReset($e) {\n      $e.preventDefault();\n\n      for (var key in this.filters) {\n        this.filters[key] = [];\n      }\n\n      this.page = 1;\n      this.getItems();\n    },\n    doPage: function doPage($e, page) {\n      $e.preventDefault();\n      this.page = page;\n      this.getItems();\n    },\n    btnFilter: function btnFilter($e, filter) {\n      if (filter) {\n        this.filters = [filter];\n      } else {\n        this.filters = [];\n      }\n\n      this.page = 1;\n      this.getItems();\n    },\n    btnSelected: function btnSelected(filter) {\n      return this.filters.includes(filter) ? \"true\" : \"false\";\n    },\n    getItems: function getItems($e) {\n      var _this3 = this;\n\n      this.fade = false;\n      var path = this.getPaginatedUrl(this.page);\n      var action = this.getPaginatedUrl(this.page, 'action');\n      action += (action.indexOf('?') > 0 ? '&' : '?') + 'entry=' + this.entry;\n      setTimeout(function () {\n        _this3.active = false;\n        fetch(action, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (json) {\n          history.replaceState({}, '', path);\n          _this3.$slot.innerHTML = json.body;\n          _this3.pagination = json.pageInfo;\n          _this3.active = true;\n          requestAnimationFrame(function () {\n            setTimeout(function () {\n              var height = _this3.$container.offsetHeight;\n              _this3.fade = true;\n              _this3.height = height;\n              requestAnimationFrame(function () {\n                var ctnHeight = _this3.$breakpoint('mq1024') && _this3.$filters ? height + _this3.$filters.offsetHeight : height;\n                setTimeout(function () {\n                  _this3.$dispatch('feedload', {\n                    height: ctnHeight\n                  });\n                });\n\n                _this3.adjustScroll();\n              });\n\n              _this3.$self.querySelector('.c-feed').focus();\n            });\n          });\n        });\n      }, 300);\n    },\n    adjustScroll: function adjustScroll() {\n      // Target is outside the view from the top\n      if (this.$container.getBoundingClientRect().top > window.innerHeight - 200) {\n        // The top of the target will be aligned to the top of the visible area of the scrollable ancestor\n        window.scrollToElement(this.$container);\n      }\n    }\n  };\n}\n\n\n\n//# sourceURL=webpack://craft-boilerplate/./src/js/components/feed.js?");

/***/ })

}]);