/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcraft_boilerplate"] = self["webpackChunkcraft_boilerplate"] || []).push([["form-js"],{

/***/ "./src/js/components/form.js":
/*!***********************************!*\
  !*** ./src/js/components/form.js ***!
  \***********************************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction form() {\n  return {\n    inputElements: [],\n    init: function init() {\n      //Set up custom Iodine rules\n      Iodine.rule(\"matchingPassword\", function (value) {\n        return value === document.getElementById(\"password\").value;\n      });\n      Iodine.setErrorMessage(\"matchingPassword\", \"Password confirmation needs to match password\"); //Store an array of all the input elements with 'data-rules' attributes\n\n      this.inputElements = _toConsumableArray(this.$el.querySelectorAll(\"input[data-rules]\"));\n      this.initDomData();\n      this.updateErrorMessages();\n    },\n    initDomData: function initDomData() {\n      var _this = this;\n\n      //Create an object attached to the component state for each input element to store its state\n      this.inputElements.map(function (ele) {\n        _this[ele.name] = {\n          serverErrors: JSON.parse(ele.dataset.serverErrors),\n          blurred: false\n        };\n      });\n    },\n    updateErrorMessages: function updateErrorMessages() {\n      var _this2 = this;\n\n      //map throught the input elements and set the 'errorMessage'\n      this.inputElements.map(function (ele) {\n        _this2[ele.name].errorMessage = _this2.getErrorMessage(ele);\n      });\n    },\n    getErrorMessage: function getErrorMessage(ele) {\n      //Return any server errors if they're present\n      if (this[ele.name].serverErrors.length > 0) {\n        return input.serverErrors[0];\n      } //Check using iodine and return the error message only if the element has not been blurred\n\n\n      var error = Iodine.assert(ele.value, JSON.parse(ele.dataset.rules));\n\n      if (!error.valid && this[ele.name].blurred) {\n        return error.error;\n      } //return empty string if there are no errors\n\n\n      return \"\";\n    },\n    submit: function submit(event) {\n      var _this3 = this;\n\n      var invalidElements = this.inputElements.filter(function (input) {\n        return Iodine.assert(input.value, JSON.parse(input.dataset.rules)) !== true;\n      });\n\n      if (invalidElements.length > 0) {\n        event.preventDefault();\n        document.getElementById(invalidElements[0].id).scrollIntoView(); //We set all the inputs as blurred if the form has been submitted\n\n        this.inputElements.map(function (input) {\n          _this3[input.name].blurred = true;\n        }); //And update the error messages.\n\n        this.updateErrorMessages();\n      }\n    },\n    change: function change(event) {\n      //Ignore all events that aren't coming from the inputs we're watching\n      if (!this[event.target.name]) {\n        return false;\n      }\n\n      if (event.type === \"input\") {\n        this[event.target.name].serverErrors = [];\n      }\n\n      if (event.type === \"focusout\") {\n        this[event.target.name].blurred = true;\n      } //Whether blurred or on input, we update the error messages\n\n\n      this.updateErrorMessages();\n    }\n  };\n}\n\n//# sourceURL=webpack://craft-boilerplate/./src/js/components/form.js?");

/***/ })

}]);